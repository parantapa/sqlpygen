"""{{module.name}}

This module has been generated with SqlPyGen from {{ src }}.
"""

from typing import Optional, Iterable
{% for import_stmt in imports %}
{{ import_stmt.import_stmt }}
{% endfor %}

{% if dbcon == "apsw" %}
import apsw
ConnectionType = apsw.Connection
{% else %}
import sqlite3
ConnectionType = sqlite3.Connection
{% endif %}

SCHEMA = {}
{% for schema in schemas %}
SCHEMA["{{ schema.name }}"] = """
{{ schema.sql }}
"""

{% endfor %}

QUERY = {}
{% for query in queries %}
QUERY["{{ query.name }}"] = """
{{ query.sql }}
"""

{% endfor %}

def create_schema(connection: ConnectionType) -> None:
    """Create the table schema."""
    with connection:
        cursor = connection.cursor()

        {% for schema in schemas %}
        try:
            sql = SCHEMA["{{ schema.name }}"]

            cursor.execute(sql)
        except Exception as e:
            raise RuntimeError("An unexpected exception occurred when creating schema: {{ schema.name }}") from e
        {% endfor %}

{% for query in queries %}

def {{ query.name }}({{ query.params.fn_params }}) -> {{ query.return_.fn_return }}:
    """Query {{query.name}}."""
    {% if query.params.has_params %}
    {% for conversion_stmt in query.params.conversions %}
    {{ conversion_stmt }}
    {% endfor %}

    query_args = {{ query.params.query_args }}
    {% endif %}

    cursor = connection.cursor()
    try:
        sql = QUERY["{{ query.name }}"]

        {% if query.params.has_params %}
        cursor.execute(sql, query_args)
        {% else %}
        cursor.execute(sql)
        {% endif %}

        {% if query.return_.does_return %}
        {% if query.return_.returns_one %}
        row = cursor.fetchone()
        {% if query.return_.conversions %}
        row = list(row)
        {% for conversion_stmt in query.return_.conversions %}
        {{ conversion_stmt }}
        {% endfor %}
        row = tuple(row)
        {% endif %}
        return row
        {% else %}
        for row in cursor:
            {% if query.return_.conversions %}
            row = list(row)
            {% for conversion_stmt in query.return_.conversions %}
            {{ conversion_stmt }}
            {% endfor %}
            row = tuple(row)
            {% endif %}
            yield row
        {% endif %}
        {% endif %}
    except Exception as e:
        raise RuntimeError("An unexpected exception occurred while executing query: {{ query.name }}") from e

{% endfor %}

def explain_queries() -> None:
    from rich.console import Console
    from rich.table import Table

    {% if dbcon == "apsw" %}
    connection = apsw.Connection(":memory:")
    {% else %}
    connection = sqlite3.connect(":memory:")
    {% endif %}
    create_schema(connection)

    console = Console()

    with connection:
        cursor = connection.cursor()

        {% for query in queries %}
        try:
            sql = QUERY["{{ query.name }}"]
            sql = "EXPLAIN " + sql

            {% if query.params.has_params %}
            query_args = {{ query.params.explain_args }}
            {% endif %}

            {% if query.params.has_params %}
            cursor.execute(sql, query_args)
            {% else %}
            cursor.execute(sql)
            {% endif %}

            table = Table(title="Query explanation for {{ query.name }}", show_header=False)
            for row in cursor:
                table.add_row(*[str(x) for x in row])
            console.print(table)
        except Exception as e:
            raise RuntimeError("An unexpected exception occurred while executing query plan for: {{ query.name }}") from e

        {% endfor %}

if __name__ == "__main__":
    explain_queries()
